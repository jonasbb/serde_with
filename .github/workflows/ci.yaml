name: Rust CI
on:
  # Always test pull requests
  pull_request:
  # Bors related branches
  push:
    branches:
      - master
      - staging
      - trying
  # Test once per week: Monday at 00:00
  schedule:
    - cron: "0 0 * * 1"

env:
  CARGO_INCREMENTAL: 0
  # Debug infos are not really needed for CI and this keeps the cache smaller
  CARGO_PROFILE_DEV_DEBUG: 0
  RUSTFLAGS: -D warnings

jobs:
  clippy_check:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        rust: ["stable", "nightly"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/clippy-check@v1
        name: clippy "No Default Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --no-default-features --all-targets -- -D warnings
          name: clippy "No Default Features" (${{ matrix.os }} / ${{ matrix.rust }})
      - uses: actions-rs/clippy-check@v1
        name: clippy "Default" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-targets -- -D warnings
          name: clippy "Default" (${{ matrix.os }} / ${{ matrix.rust }})
      - uses: actions-rs/clippy-check@v1
        name: clippy "All Features" (${{ matrix.os }} / ${{ matrix.rust }})
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings
          name: clippy "All Features" (${{ matrix.os }} / ${{ matrix.rust }})

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        name: Rustfmt Check (${{ matrix.rust }})
        with:
          command: fmt
          args: --all -- --check

  build_and_test:
    name: Build and Test
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        # It is good to test more than the MSRV and stable since sometimes
        # breakage occurs in intermediate versions.
        # IMPORTANT: Synchronize the MSRV with the Cargo.toml values.
        rust: ["1.46", "1.50", "1.55", "stable", "beta", "nightly"]
        crate: ["serde_with", "serde_with_macros", "serde_with_test"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: Swatinem/rust-cache@v1

      # Build the project
      - uses: actions-rs/cargo@v1
        name: "Build (${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        if: matrix.rust != 'nightly'
        with:
          command: build
          args: --all-features --all-targets --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Build (${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        if: matrix.rust == 'nightly'
        with:
          command: build
          # https://github.com/rust-lang/cargo/issues/8088 for unstable-options
          args: --all-features --all-targets --manifest-path=${{ matrix.crate }}/Cargo.toml -Zunstable-options -Zfeatures=dev_dep,host_dep

      # The tests are split into build and run steps, to see the time impact of each
      # cargo test --all-targets does NOT run doctests
      # since doctests are important this should not be added
      # https://github.com/rust-lang/cargo/issues/6669
      - uses: actions-rs/cargo@v1
        name: "Test Build (No Default Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          # We need to specify the manifest path, such that cargo knows where to apply the `no-default-features`.
          # This is no longer necessary for Rust 1.51 or resolver="2"
          # https://doc.rust-lang.org/nightly/cargo/reference/features.html#resolver-version-2-command-line-flags
          args: --no-default-features --no-run --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Test Run (No Default Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          args: --no-default-features --no-fail-fast --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Test Build (Default Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          # We need to specify the manifest path, such that cargo knows where to apply the `no-default-features`.
          # This is no longer necessary for Rust 1.51 or resolver="2"
          # https://doc.rust-lang.org/nightly/cargo/reference/features.html#resolver-version-2-command-line-flags
          args: --no-run --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Test Run (Default Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          args: --no-fail-fast --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Test Build (All Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          # We need to specify the manifest path, such that cargo knows where to apply the `no-default-features`.
          # This is no longer necessary for Rust 1.51 or resolver="2"
          # https://doc.rust-lang.org/nightly/cargo/reference/features.html#resolver-version-2-command-line-flags
          args: --all-features  --no-run --manifest-path=${{ matrix.crate }}/Cargo.toml
      - uses: actions-rs/cargo@v1
        name: "Test Run (All Features / ${{ matrix.os }} / ${{ matrix.rust }} / Crate ${{ matrix.crate }})"
        with:
          command: test
          args: --all-features --no-default-features --no-fail-fast --manifest-path=${{ matrix.crate }}/Cargo.toml

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        if: matrix.rust == 'stable'  && matrix.os == 'ubuntu-latest'
        with:
          # tarpaulin already runs with --all-targets
          args: "--workspace --all-features -- --test-threads=1"
          version: "latest"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2.1.0
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  # Added to summarize the matrix (otherwise we would need to list every single
  # job in bors.toml)
  # https://forum.bors.tech/t/bors-with-github-workflows/426
  tests-result:
    name: Tests result
    if: always()
    needs:
      - rustfmt
      - clippy_check
      - build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: "needs.rustfmt.result == 'success' && needs.clippy_check.result == 'success' && needs.build_and_test.result == 'success'"
        run: exit 0
      - name: Mark the job as a failure
        if: "!(needs.rustfmt.result == 'success' && needs.clippy_check.result == 'success' && needs.build_and_test.result == 'success')"
        run: exit 1
